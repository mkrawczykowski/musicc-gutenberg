/*!********************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js!./node_modules/postcss-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/sass/index.scss ***!
  \********************************************************************************************************************************************************/
/***
    The new CSS reset - version 1.7.3 (last updated 7.8.2022)
    GitHub page: https://github.com/elad2412/the-new-css-reset
***/
/*
    Remove all the styles of the "User-Agent-Stylesheet", except for the 'display' property
    - The "symbol *" part is to solve Firefox SVG sprite bug
 */
*:where(:not(html, iframe, canvas, img, svg, video, audio):not(svg *, symbol *)) {
  all: unset;
  display: revert;
}

/* Preferred box-sizing value */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Reapply the pointer cursor for anchor tags */
a,
button {
  cursor: revert;
}

/* Remove list styles (bullets/numbers) */
ol,
ul,
menu {
  list-style: none;
}

/* For images to not be able to exceed their container */
img {
  max-width: 100%;
}

/* removes spacing between cells in tables */
table {
  border-collapse: collapse;
}

/* Safari - solving issue when using user-select:none on the <body> text input doesn't working */
input,
textarea {
  -webkit-user-select: auto;
}

/* revert the 'white-space' property for textarea elements on Safari */
textarea {
  white-space: revert;
}

/* minimum style to allow to style meter element */
meter {
  -webkit-appearance: revert;
  -moz-appearance: revert;
       appearance: revert;
}

/* reset default text opacity of input placeholder */
::-moz-placeholder {
  color: unset;
}
::placeholder {
  color: unset;
}

/* fix the feature of 'hidden' attribute.
   display:revert; revert to element instead of attribute */
:where([hidden]) {
  display: none;
}

/* revert for bug in Chromium browsers
   - fix for the content editable attribute will work properly.
   - webkit-user-select: auto; added for Safari in case of using user-select:none on wrapper element*/
:where([contenteditable]:not([contenteditable=false])) {
  -moz-user-modify: read-write;
  -webkit-user-modify: read-write;
  overflow-wrap: break-word;
  -webkit-line-break: after-white-space;
  -webkit-user-select: auto;
}

/* apply back the draggable feature - exist only in Chromium and Safari */
:where([draggable=true]) {
  -webkit-user-drag: element;
}

html {
  font-size: 10px;
  font-size: 62.5%;
  scrollbar-width: thin;
}

::-webkit-scrollbar {
  width: 8px;
  height: 8px;
  background-color: #ffffff;
}

body {
  position: relative;
  overflow-x: hidden;
  background-color: #000000;
}

img {
  max-width: 100%;
  height: auto;
}

.container {
  width: 100%;
  padding: 0 2rem;
  margin: 0 auto;
}
@media screen and (min-width: 1400px) {
  .container {
    max-width: 125rem;
  }
}
@media screen and (min-width: 1400px) {
  .container.container--wider {
    max-width: 140rem;
  }
}
.container .row {
  display: flex;
  margin-left: -2rem;
  margin-right: -2rem;
  justify-content: flex-start;
  flex-wrap: wrap;
}
.container .row .col {
  padding-right: 2rem;
  padding-left: 2rem;
  width: 100%;
}
.container .row .col.col--60 {
  width: 100%;
}
@media screen and (min-width: 1400px) {
  .container .row .col.col--60 {
    width: 60%;
  }
}
.container .row .col.col--40 {
  width: 100%;
}
@media screen and (min-width: 1400px) {
  .container .row .col.col--40 {
    width: 40%;
  }
}
.container .row .col.col--50 {
  width: 100%;
}
@media screen and (min-width: 1400px) {
  .container .row .col.col--50 {
    width: 50%;
  }
}
